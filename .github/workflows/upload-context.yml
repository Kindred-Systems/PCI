name: Upload Context to OpenAI

on:
  push:
    branches:
      - main  # Runs when pushing to main
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-gpt-context:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert Context Files to JSONL
        run: |
          echo "Creating JSONL file..."
          echo "" > project-context.jsonl
          
          # Process all markdown, text, and code files
          for file in $(find ./context-folder -type f \( -name "*.md" -o -name "*.txt" -o -name "*.py" -o -name "*.tsx" -o -name "*.ts" -o -name "*.html" -o -name "*.css" -o -name "*.json" \)); do
            if [[ -f "$file" ]]; then
              content=$(jq -Rs '.' < "$file")  # Escape and format as JSON string
              echo "{\"file\": \"$file\", \"content\": $content}" >> project-context.jsonl
            fi
          done
          
          echo "✅ JSONL file created: project-context.jsonl"

      - name: Upload JSONL to OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Uploading project-context.jsonl to OpenAI..."
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/files" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: multipart/form-data" \
            -F "file=@project-context.jsonl" \
            -F "purpose=fine-tune")

          echo "Upload Response: $RESPONSE"
          echo "$RESPONSE" > response.json

      - name: Handle API Response
        run: |
          echo "Checking API Response..."
          RESPONSE=$(cat response.json)
          if [[ $RESPONSE == *"error"* ]]; then
            echo "❌ Upload failed! Response:"
            echo "$RESPONSE"
            exit 1
          else
            echo "✅ Upload successful!"
          fi
